?###???????? 3,2,1
?#?#?#?#?#?#?#? 1,3,1,6

1. establish zones
    - analyze zone of each number (from left to right)
    - start of a zone
        -> sum up previous numbers + add 1 for each of them (the spaces between)
    - end of a zone
        -> take the symbolRow.length and subtract the following number:
        -> sum up succeeding numbers + add 1 for each of them (the spaces between) (those two look pretty similiar - ambigous function maybe?)
    -> zero based, inclusive
    - 3 has a zone of 0 - 6  (0 -> aka start)
    - 2 has a zone of 4 - 9
    - 1 has a zone of 7 - 11 (11 -> aka end -> aka codeLine.length)

2. save up possible variations for each number
    - take the length of the zone and subtract from it the length of the number -> thats the number of variations
    - for each variation, record it's start and it's end
        -> maybe a "for cycle" the length of the number of variations
        -> where the first loop is the [start = "starting coordinate"; end = "starting coordinate" + "length of the number" - 1 (the minus one is for the starting position)]
        -> and each loop add [1] to the start and the end alike
    - example for the number 2:
        -> [zone.length = 6]
        -> ["wiggleSpace" = 4 (zone.length - number.value)]
        -> possibleVariations[0] = { start: 4, end: 5 }
        -> possibleVariations[1] = { start: 5, end: 6 }
        -> possibleVariations[2] = { start: 6, end: 7 }
        -> possibleVariations[3] = { start: 7, end: 8 }
        -> possibleVariations[4] = { start: 8, end: 9 }
        -->wiggleSpace + 1 = no of variations

3. filter the possibleVariations based on the symbols in input
    - make a copy of the input
    - fill the positions in the possibleVariation with "#"
    - check if it's a valid variation (check that the surroundings symbols of the start and end positions are not "#" -> [start -1, end + 1])
    - if valid, add to a new array validCombinations (haven't decided on the "variations/combinations" thing)

4. once each number has it's validCombinations list, run a compatibility check between individual combinations
    - each loop, take one combination out of every list (for each number) and fill all the combination's areas with "#'s"
    - if this "multi-combination" proves valid, add it to a list of compatibleCombinations (list should contain this information for each number: [number,start,end])
    - i could encounter a problem -> if I loop every combination with every other combination (even if this combination has been already run), i could get a duplicate compatibleCombination
        - solution:
            -> log each combination (compatible or not => i can tell them apart by also filling in a boolean 'compatible' property)
            -> make a "hash" created out of the sequence of all starts and ends
            -> [#.#.### 1,1,3] would have the hash of: [002246]
            -> if a combination of this hash is found in the combinations array, dont run the check -> continue in the 

5. sum up compatibleCombinations.length for each line